###
###              ejabberd configuration file
###
### The parameters used in this configuration file are explained at
###
###       https://docs.ejabberd.im/admin/configuration
###
### The configuration file is written in YAML.
### *******************************************************
### *******           !!! WARNING !!!               *******
### *******     YAML IS INDENTATION SENSITIVE       *******
### ******* MAKE SURE YOU INDENT SECTIONS CORRECTLY *******
### *******************************************************
### Refer to http://en.wikipedia.org/wiki/YAML for the brief description.
###

include_config_file:
  "/home/ejabberd/conf/macros.yml":
    allow_only: [define_macro]

hosts:
  - {{ env['HOST'] }}.{{ env['DOMAIN'] }}

host_config:
  whalesanctuary.synology.me:
    auth_method: ldap
    ldap_servers: 
      - slapd
    ldap_rootdn: "cn=readonly,{{ env['LDAP_BASE_DN'] }}"
    ldap_password: {{ env['LDAP_READONLY_USER_PASSWORD'] }}
    ldap_encrypt: starttls
    ldap_port: 389
    ldap_base: {{ env['LDAP_BASE_DN'] }}
    ldap_filter: (objectClass=person)
    ldap_uids:
      - uid
    sql_type: pgsql
    sql_server: db
    sql_database: ejabberd
    sql_username: ejabberd
    sql_password: {{ env['EJABBERD_POSTGRES_PASSWORD'] }}

default_db: sql
new_sql_schema: true

loglevel: info
log_rotate_size: 10485760
log_rotate_count: 1

# Requires a trusted CA
certfiles:
- /home/ejabberd/conf/certs/fullchain.pem
- /home/ejabberd/conf/certs/privkey.pem

# If you don't have a CA cert file you may need to add the ca-certificate package
# see build/ejabberd/Dockerfile
# ca_file: /home/ejabberd/conf/certs/cacert.pem

listen:
  -
    port: 5222
    ip: "::"
    module: ejabberd_c2s
    max_stanza_size: 262144
    shaper: c2s_shaper
    access: c2s
    # tls: true
    starttls_required: true
  # -
  #   port: 5223
  #   ip: "::"
  #   module: ejabberd_c2s
  #   max_stanza_size: 262144
  #   shaper: c2s_shaper
  #   access: c2s
  #   starttls_required: true    
  -
    port: 5269
    ip: "::"
    module: ejabberd_s2s_in
    max_stanza_size: 524288
  -
    port: 5443
    ip: "::"
    module: ejabberd_http
    tls: true
    request_handlers:
      "/admin": ejabberd_web_admin
      "/api": mod_http_api
      "/bosh": mod_bosh
      "/captcha": ejabberd_captcha
      "/upload": mod_http_upload
      "/ws": ejabberd_http_ws
      "/oauth": ejabberd_oauth  
    custom_headers:
      "Access-Control-Allow-Origin": "*"
      "Access-Control-Allow-Methods": "OPTIONS, HEAD, GET, PUT"
      "Access-Control-Allow-Headers": "Authorization"
      "Access-Control-Allow-Headers": "Content-Type, Origin, X-Requested-With"
      "Access-Control-Allow-Credentials": "true" 

# Uncomment the acme line to enable Let's Encrypt        
  -
    port: 5280
    ip: "::"
    module: ejabberd_http
    request_handlers:
      "/admin": ejabberd_web_admin
      # "/.well-known/acme-challenge": ejabberd_acme
  -
    port: 1883
    ip: "::"
    module: mod_mqtt
    backlog: 1000

  -
    ip: "0.0.0.0"
    port: STUN_PORT
    transport: udp
    module: ejabberd_stun
    use_turn: true
    turn_ipv4_address: 'EXTERNAL_IPV4'
    turn_min_port: 49152
    turn_max_port: 65535

  ##
  ## https://docs.ejabberd.im/admin/configuration/#stun-and-turn
  ## ejabberd_stun: Handles STUN Binding requests
  ##
  ##-
  ##  port: 3478
  ##  ip: "0.0.0.0"
  ##  transport: udp
  ##  module: ejabberd_stun
  ##  use_turn: true
  ##  turn_ip: "{{ IP }}"
  ##  auth_type: user
  ##  auth_realm: "example.com"
  ##-
  ##  port: 3478
  ##  ip: "0.0.0.0"
  ##  module: ejabberd_stun
  ##  use_turn: true
  ##  turn_ip: "{{ IP }}"
  ##  auth_type: user
  ##  auth_realm: "example.com"
  ##- 
  ##  port: 5349
  ##  ip: "0.0.0.0"
  ##  module: ejabberd_stun
  ##  certfile: "/home/ejabberd/conf/server.pem"
  ##  tls: true
  ##  use_turn: true
  ##  turn_ip: "{{ IP }}"
  ##  auth_type: user
  ##  auth_realm: "example.com"
  ##
  ## https://docs.ejabberd.im/admin/configuration/#sip
  ## To handle SIP (VOIP) requests:
  ##
  ##-
  ##  port: 5060
  ##  ip: "0.0.0.0"
  ##  transport: udp
  ##  module: ejabberd_sip
  ##-
  ##  port: 5060
  ##  ip: "0.0.0.0"
  ##  module: ejabberd_sip
  ##-
  ##  port: 5061
  ##  ip: "0.0.0.0"
  ##  module: ejabberd_sip
  ##  tls: true

s2s_use_starttls: optional

acl:
  local:
    user_regexp: ""
  loopback:
    ip:
      - 127.0.0.0/8
      - ::1/128
      - ::FFFF:127.0.0.1/128
  admin:
    user:
      - admin
      - "{{ env['EJABBERD_ADMIN_USER'] }}"

access_rules:
  local:
    allow: local
  c2s:
    deny: blocked
    allow: all
  announce:
    allow: admin
  configure:
    allow: admin
  muc_create:
    allow: local
  pubsub_createnode:
    allow: local
  trusted_network:
    allow: loopback

api_permissions:
  "console commands":
    from:
      - ejabberd_ctl
    who: all
    what: "*"
  "admin access":
    who:
      access:
        allow:
          acl: loopback
          acl: admin
      oauth:
        scope: "ejabberd:admin"
        access:
          allow:
            acl: loopback
            acl: admin
    what:
      - "*"
      - "!stop"
      - "!start"
  "public commands":
    who:
      ip: 127.0.0.1/8
    what:
      - status
      - connected_users_number

shaper:
  normal: 1000
  fast: 50000

shaper_rules:
  max_user_sessions: 10
  max_user_offline_messages:
    5000: admin
    100: all
  c2s_shaper:
    none: admin
    normal: all
  s2s_shaper: fast

max_fsm_queue: 10000

acme:
  contact: "mailto:{{ env['EJABBERD_ADMIN_USER'] }}"
  ca_url: https://acme-v02.api.letsencrypt.org/directory
  # ca_url: https://acme-staging-v02.api.letsencrypt.org/directory


modules:
  mod_adhoc: {}
  mod_admin_extra: {}
  mod_announce:
    access: announce
  mod_avatar: {}
  mod_blocking: {}
  mod_bosh: {}
  mod_caps: {}
  mod_carboncopy: {}
  mod_client_state: {}
  mod_configure: {}
  mod_disco: {}
  mod_fail2ban: {}
  mod_http_api: {}
  mod_http_upload:
    name: "HTTP File Upload"
    access: local
    max_size: 104857600 # 100 MiB.
    file_mode: "0640"
    dir_mode: "2750"
    # docroot: "/var/www/upload/@HOST@" # This needs to exists and be writable default: ~/upload
    put_url: https://@HOST@:5443/upload
    custom_headers:
      "Access-Control-Allow-Origin": "*"
      "Access-Control-Allow-Methods": "OPTIONS, HEAD, GET, PUT"
      "Access-Control-Allow-Headers": "Authorization"
      "Access-Control-Allow-Headers": "Content-Type, Origin, X-Requested-With"
      "Access-Control-Allow-Credentials": "true" 
    thumbnail: false  
  mod_last: {}
  mod_mam:
    ## Mnesia is limited to 2GB, better to use an SQL backend
    ## For small servers SQLite is a good fit and is very easy
    ## to configure. Uncomment this when you have SQL configured:
    ## db_type: sql
    assume_mam_usage: true
    default: never
  mod_mqtt: {}
  mod_muc:
    access:
      - allow
    access_admin:
      - allow: admin
    access_create: muc_create
    access_persistent: muc_create
    access_mam:
      - allow
    default_room_options:
      allow_subscription: true  # enable MucSub
      mam: false
  mod_muc_admin: {}
  mod_offline:
    access_max_user_messages: max_user_offline_messages
  mod_ping: {}
  mod_privacy: {}
  mod_private: {}
  mod_proxy65:
    access: local
    max_connections: 5
  mod_pubsub:
  # mod_pubsub:
  #   access_createnode: local
  #   ignore_pep_from_offline: false
    last_item_cache: false
    max_items_node: 1000
    default_node_config:
      max_items: 1000
  #   plugins:
  #     - "flat"
  #     - "pep" # Requires mod_caps.    
    access_createnode: pubsub_createnode
    plugins:
      - flat
      - pep
    force_node_config:
      ## Avoid buggy clients to make their bookmarks public
      storage:bookmarks:
        access_model: whitelist
  mod_push: {}
  mod_push_keepalive: {}
  # Disable registrations as that's handled by keycloak
  # mod_register:
  #   ## Only accept registration requests from the "trusted"
  #   ## network (see access_rules section above).
  #   ## Think twice before enabling registration from any
  #   ## address. See the Jabber SPAM Manifesto for details:
  #   ## https://github.com/ge0rg/jabber-spam-fighting-manifesto
  #   redirect_url: https://sso.whalesanctuary.synology.me/auth/realms/whalesanctuary/account
  #   ip_access: trusted_network
  mod_roster:
    versioning: true
  mod_sip: {}
  mod_s2s_dialback: {}
  mod_shared_roster: {}
  mod_shared_roster_ldap:
    ldap_groupattr: "cn"
    ldap_groupdesc: ""
    ldap_memberattr: "uid"
    ldap_memberattr_format: "%u"
    ldap_useruid: "uid"
    ldap_userdesc: "cn"
    ldap_rfilter: (&(objectClass=groupOfUniqueNames)(cn=Staff))
    ldap_gfilter: (&(objectClass=person)(memberOf=cn=Staff,ou=Groups,{{ env['LDAP_BASE_DN'] }}))
    ldap_ufilter: (&(objectClass=person)(uid=%u))
    # ldap_filter: "" This is purposely commented out because it causes a fail to start
    ldap_auth_check: on

  mod_vcard:
    db_type: ldap
    search: true
    allow_return_all: true
    ldap_uids: {"uid": "%u"}
    ldap_search_fields:
      User: "%u"
      "Full Name": cn
      "Given Name": givenName
      "Middle Name": initials
      "Family Name": sn
      Nickname: "%u"
      Birthday: birthDay
      Country: c
      City: l
      Email: mail
      "Organization Name": o
      "Organization Unit": ou
    ldap_search_reported:
      "Full Name": FN
      "Given Name": FIRST
      "Middle Name": MIDDLE
      "Family Name": LAST
      "Nickname": NICKNAME
      "Birthday": BDAY
      "Country": CTRY
      "City": LOCALITY
      "Email": EMAIL
      "Organization Name": ORGNAME
      "Organization Unit": ORGUNIT
    ldap_vcard_map:
      NICKNAME: {"%u": []}
      FN: {"%s": [cn]}
      LAST: {"%s": [sn]}
      FIRST: {"%s": [givenName]}
      MIDDLE: {"%s": [initials]}
      ORGNAME: {"%s": [o]}
      ORGUNIT: {"%s": [ou]}
      CTRY: {"%s": [c]}
      LOCALITY: {"%s": [l]}
      STREET: {"%s": [street]}
      REGION: {"%s": [st]}
      PCODE: {"%s": [postalCode]}
      TITLE: {"%s": [title]}
      URL: {"%s": [labeleduri]}
      DESC: {"%s": [description]}
      TEL: {"%s": [telephoneNumber]}
      EMAIL: {"%s": [mail]}
      BDAY: {"%s": [birthDay]}
      ROLE: {"%s": [employeeType]}
      PHOTO: {"%s": [jpegPhoto]}


  mod_vcard_xupdate: {}
  mod_version:
    show_os: false

  mod_stun_disco:
    offer_local_services: false
    services:
      -
        host: 'EXTERNAL_IPV4'
        port: STUN_PORT
        type: stun
        transport: udp
      -
        host: 'EXTERNAL_IPV4'
        port: STUN_PORT
        type: turn
        transport: udp

### Local Variables:
### mode: yaml
### End:
### vim: set filetype=yaml tabstop=8